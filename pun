#!/bin/bash
#
# pun - Pacman Update Notifier
# 
# v0.3 / 2015.06.18
#
# © 2015 Bernd Busse, Daniel Jankowski
# Licensed under the LGPLv3
#

LAST_MAIL_SAVE=/var/lib/pun/mail_save.dat
LAST_CHECK_SAVE=/var/lib/pun/check_save.dat
MAIL_FILE=/var/lib/pun/sendmail.txt

_pacman_forced=0
_no_mail=0

function print_usage() {
    echo "Usage: $0 [OPTIONS]"
}

function print_version() {
    echo "pun - Pacman Update Notifier"
    echo "Version v0.3 - © Bernd Busse, Daniel Jankowski"
}

function print_help() {
    print_version
    echo ""
    print_usage
    echo ""
    echo "    -h      Show this help message"
    echo "    -p      Force to use pacman"
    echo "    -n      Send no mail"
    echo ""
    echo "If package-query is installed, it will be used by default. Force pacman use with the -p switch."
}

function print_pkglist() {
    _old_ifs=$IFS
    echo -e "$1" | while IFS= read -r pkg; do
        echo "    :: $pkg"
    done
    IFS=$_old_ifs
}

# parse command line options
while [[ -n $1 ]]; do
    case $1 in
        "-h")
            print_help
            exit 0 ;;
        "-p")
            _pacman_forced=1
            shift ;;
        "-n")
            _no_mail=1
            shift ;;
        *)
            echo "Unknown option: $1"
            print_usage
            exit 1 ;;
    esac
done

# create temporary directory if not exists
if [[ ! -d "/var/lib/pun" ]]; then
    mkdir /var/lib/pun
fi

# check for pacman and package-query
if [[ -x "$( which pacman 2> /dev/null )" ]]; then
    _pacman="$( which pacman )"
else
    echo "Error: cannot find pacman. Your system is weird!"
    exit 1
fi

if [[ -x "$( which package-query 2> /dev/null )" && $_pacman_forced != 1 ]]; then
    _query="$( which package-query )"
    list_cmd="$_query -QAu"
else
    list_cmd="$_pacman --color never -Qu"
fi

# update package database
$_pacman -Sy >& /dev/null
if (( $? != 0 )); then
    echo "Error: cannot update database (Maybe no sudo?)"
    exit 1
fi

# get updatelist
pkg_list="$( $list_cmd 2> /dev/null )"
if (( $? != 0 )); then
    echo "Error: cannot fetch update list"
    exit 1
fi

num_pkg="$( echo -e "${pkg_list}" | wc -l )"
last_upd="$( grep -e 'starting full system upgrade' /var/log/pacman.log | sed -re 's/^\[([0-9]{4}-[0-9]{2}-[0-9]{2}\s[0-9]{2}:[0-9]{2})\]\s.*$/\1/g' | tail -n -1 )"

# print message
echo "Last update: $last_upd"

if (( $num_pkg == 0 )); then
    echo "System is up to date."
elif (( $_no_mail == 1 )); then
    # print updates to terminal with -n flag
    echo "You have $num_pkg updates:"
    print_pkglist "$pkg_list"
else
    # should we send a mail?
    if [[ -e "$LAST_MAIL_SAVE" ]]; then
        # read last_mail date from file
        last_mail="$( cat "$LAST_MAIL_SAVE" )"
        mail_sec=$( date -d "$last_mail" +%s )
    else
        mail_sec=0
    fi

    if [[ -e "$LAST_CHECK_SAVE" ]]; then
        # read package numer of last check from file
        last_num="$( cat "$LAST_CHECK_SAVE" )"
    else
        last_num=0
    fi

    update_sec=$( date -d "$last_upd" +%s )

    if (( $mail_sec < $update_sec || $last_num < $num_pkg )); then
        # log action
        echo "You have $num_pkg updates. Sending mail..."
        
        # write to temporary mail file
        echo "Last update: $last_upd." > $MAIL_FILE
        echo "You have $num_pkg updates:" >> $MAIL_FILE
        print_pkglist "$pkg_list" >> $MAIL_FILE

        # save state
        date +"%Y-%m-%d %H:%M" > $LAST_MAIL_SAVE
        echo "$num_pkg" > $LAST_CHECK_SAVE
    else
        # log action
        echo "No new updates since last mail. Do nothing..."
    fi
fi

